package treenode;

import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;

import org.eclipse.jdt.core.dom.ASTNode;
import org.eclipse.jdt.core.dom.ASTVisitor;
import org.eclipse.jdt.core.dom.ForStatement;
import org.eclipse.jdt.core.dom.MethodDeclaration;
import org.eclipse.jdt.core.dom.VariableDeclaration;
import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
import org.eclipse.jdt.core.dom.VariableDeclarationStatement;
import org.eclipse.zest.core.widgets.Graph;
import org.eclipse.zest.core.widgets.GraphNode;

import ch.uzh.ifi.seal.changedistiller.treedifferencing.Node;
import graph.builder.GModelBuilder;
import graph.model.GConnection;
import graph.model.GNode;
import graph.model.node.GMethodNode;
import graph.model.node.GSubMethodNode;
import util.UtilNode;

public class ContinueStatemenTreeNodeAnalyzer extends ASTVisitor {

	GMethodNode originMNode = null;
	GSubMethodNode originSubMNode = null;
	Map<String, GNode> nodeMap = new HashMap<String, GNode>();
	Node rootNode = null;
	Node currentNode = null;

	public ContinueStatemenTreeNodeAnalyzer(Node rootNode, Node currentNode) {
		this.rootNode = rootNode;
		this.currentNode = currentNode;
	}

	public void analyze() {
		addSrcNodeInstanceList();
		if (originMNode != null)
			addConnection(originMNode, currentNode);
		else if (originSubMNode != null) {
			addConnection(originSubMNode, currentNode);
		}
	}

	void addConnection(GNode originNode, Node currentNode) {
		String nodeName = getName(currentNode);
		int startPos = currentNode.hashCode();
		// Add a node
		GSubMethodNode dstGNode = createGNode(currentNode, nodeName);
		GModelBuilder.instance().getNodes().add(dstGNode);
		// Add a connection
		String conId = originNode.getId() + dstGNode.getId();
		String conLabel = "offset: " + currentNode.hashCode();
		GConnection con = new GConnection(conId, conLabel, originNode, dstGNode);
		GModelBuilder.instance().getConnections().add(con);
		originNode.getConnectedTo().add(dstGNode);

		// Update map
		nodeMap.put(nodeName + ":" + startPos, dstGNode);
	}

	String getName(Node currentNode) {
		String name = new String("continue;");
		return name;
	}

	GSubMethodNode createGNode(Node currentNode, String nodeName) {
		String dstGNodeId = nodeName + currentNode.hashCode();
		return new GSubMethodNode(dstGNodeId, nodeName);
	}

	public void setSourceNode(GMethodNode methDecl) {
		this.originMNode = methDecl;
	}

	public void setSubMSourceNode(GSubMethodNode subMNode) {
		this.originSubMNode = subMNode;
	}

	void addSrcNodeInstanceList() {
		// if the list does not contain the origin node, add it to the instance list
		if (this.originMNode != null) {
			if (!(GModelBuilder.instance().getNodes().contains(this.originMNode))) {
				GModelBuilder.instance().getNodes().add(this.originMNode);
			}
		}
		else if(this.originSubMNode != null) {
			if (!(GModelBuilder.instance().getNodes().contains(this.originSubMNode))) {
				GModelBuilder.instance().getNodes().add(this.originSubMNode);
			}
		}
	}
}
